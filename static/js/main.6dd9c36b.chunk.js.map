{"version":3,"sources":["theme.js","components/AppBar.js","recipes.js","components/Drawer.js","components/Recipe/Section.js","components/Recipe/index.js","recipes/ButternutSquashCassrole.js","recipes/ChickenBroccoliCasserole.js","recipes/Chili.js","recipes/ChristmasMorningSaver.js","recipes/DakGalbi.js","recipes/DillPickleSoup.js","recipes/EggplantMincedPork.js","recipes/FestiveTurnip.js","recipes/GrilledSweetPotato.js","recipes/LeekPotatoSoup.js","recipes/MintyCookies.js","recipes/ShrimpSquashRisotto.js","recipes/SoySrirachaSauce.js","recipes/VidaliaOnionDip.js","components/Router/index.js","App.js","serviceWorker.js","index.js"],"names":["Component","theme","createMuiTheme","palette","primary","purple","typography","useNextVariants","mixins","toolbar","minHeight","useStyles","makeStyles","menuButton","marginLeft","martinRight","AppBar","props","isDrawerOpen","setDrawerOpen","classes","position","Toolbar","IconButton","className","color","onClick","Menu","Typography","variant","noWrap","recipes","key","name","sections","type","items","list","width","Drawer","closeDrawer","open","onClose","tabIndex","role","onKeyDown","map","recipe","ListItem","button","component","href","ListItemText","Section","title","List","defaultTitle","item","root","margin","spacing","Recipe","section","index","ButternutSquashSoup","ChickenBroccoliCasserole","Chili","ChristmasMorningSaver","DakGalbi","DillPickleSoup","EggplantMincedPork","FestiveTurnip","GrilledSweetPotato","LeekPotatoSoup","MintyCookies","ShripSquashRisotto","SoySrirachaSauce","VidaliaOnionDip","Router","hashType","path","render","ButternutSquashCassrole","ShrimpSquashRisotto","exact","withTheme","useState","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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sDACA,wDACA,sDACA,uEACA,4DACA,+DACA,sEACA,mDACA,6DACA,8CACA,oDACA,6CAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,4BACE,oEACA,wDACA,iGACA,kHAIA,4EACA,+FACA,mEACA,wDACA,kHCeSqC,EA9CD,kBACZ,6BACE,kBAACtC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,4BACE,oDACA,8EACA,2EACA,4DACA,+DACA,6DACA,wDACA,kEACA,yEACA,qDACA,4CACA,oDACA,iEACA,0DACA,0DACA,wDACA,2EACA,sDACA,+CACA,8DACA,yDACA,mDAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,4BACE,0HAIA,wIAIA,iHAIA,wFCKSsC,EA9Ce,kBAC5B,6BACE,kBAACvC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,4BACE,kEACA,oEACA,8DACA,sCACA,oDACA,oEACA,mDACA,iDACA,sDACA,iEACA,2CACA,sDACA,8CACA,gEAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,sCACA,4BACE,0GAIA,yEACA,0EACA,sFACA,uEACA,yGAIA,yEACA,iEAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,wBACA,4BACE,qFACA,qDACA,6DACA,2ECcSuC,EAvDE,kBACf,6BACE,kBAACxC,EAAA,EAAD,CAAYC,QAAQ,MAApB,uBACA,4BACE,wDACA,uDACA,kDACA,sDACA,gDACA,mDACA,oDACA,6CAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,yBACA,4BACE,iDACA,mDACA,sDACA,6CAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BACA,4BACE,8CACA,wCACA,mDACA,gDACA,oEACA,qCACA,yCACA,0CACA,6CAEF,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,4BACE,4FACA,4DACA,kIAIA,mGAGA,uFACA,4HAIA,kEACA,wEACA,mDCVSwC,EAxCQ,kBACrB,6BACE,kBAACzC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,4B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","file":"static/js/main.6dd9c36b.chunk.js","sourcesContent":["import React from \"react\";\nimport {MuiThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\nimport {purple} from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  mixins: {\n    toolbar: {\n      minHeight: 48,\n    },\n  },\n});\n\nconst withTheme = Component => props => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Component {...props} />\n  </MuiThemeProvider>\n);\nexport {withTheme};\n","import React from \"react\";\nimport {\n  AppBar as MuiAppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  menuButton: {\n    marginLeft: -12,\n    martinRight: 20,\n  },\n}));\n\nconst AppBar = props => {\n  const {isDrawerOpen, setDrawerOpen} = props;\n  const classes = useStyles();\n\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          onClick={() => setDrawerOpen(!isDrawerOpen)}\n        >\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          Recipes\n        </Typography>\n      </Toolbar>\n    </MuiAppBar>\n  );\n};\n\nexport default AppBar;\n","const recipes = [\n  {\n    key: \"asian-dumpling-sauce\",\n    name: \"Asian Dumpling Sauce\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1/4 cup soy sauce\",\n          \"1/4 cup rice wine vinegar\",\n          \"1 tablespoon honey\",\n          \"2 cloves minced garlic\",\n          \"2 teaspoons minced ginger\",\n          \"1 teaspoon sesame seeds\",\n          \"1 teaspoon sesame oil\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\"mix together\"],\n      },\n    ],\n  },\n  {\n    key: \"broccoli-casserole\",\n    name: \"Broccoli Casserole\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 bunches of broccoli (~300g)\",\n          \"1 can cream of mushroom soup\",\n          \"250ml sour cream\",\n          \"1 tablespoon minced onion\",\n          \"1 cup shredded cheddar cheese\",\n          \"15 Ritz crackers, crushed\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Cook broccoli until tener, and drain well\",\n          \"Mix with all other ingredients\",\n          \"Bake for 20 minutes at 350F\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"broccoli-slaw-salad\",\n    name: \"Broccoli Slaw Salad\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 packs of beef Mr. Noodles\",\n          \"4 green onions\",\n          \"1 cup roasted/salted sunflower seeds\",\n          \"1/2 cup sugar\",\n          \"3/4 cup oil\",\n          \"1/3 cup vinegar\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"smash up the dry noodles\",\n          \"chop the green onions\",\n          \"mix everything together\",\n        ],\n      },\n    ],\n  },\n  /*\n  {\n    key: \"template\",\n    name: \"Template\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\"bullted list\"],\n      },\n      {\n        type: \"directions\",\n        items: [\"numbered list\"],\n      },\n    ],\n  },\n  */\n];\n\nexport {recipes};\n","import React from \"react\";\nimport {\n  Drawer as MuiDrawer,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nimport {recipes} from \"../recipes\";\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 240,\n  },\n}));\n\nconst Drawer = props => {\n  const {isDrawerOpen, setDrawerOpen} = props;\n  const classes = useStyles();\n\n  const closeDrawer = () => setDrawerOpen(false);\n\n  return (\n    <MuiDrawer open={isDrawerOpen} onClose={closeDrawer}>\n      <div\n        tabIndex={0}\n        role=\"button\"\n        onClick={closeDrawer}\n        onKeyDown={closeDrawer}\n      >\n        <List className={classes.list}>\n          {recipes.map(recipe => (\n            <ListItem\n              key={recipe.key}\n              button\n              component=\"a\"\n              href={`#${recipe.key}`}\n            >\n              <ListItemText primary={recipe.name} />\n            </ListItem>\n          ))}\n          <ListItem button component=\"a\" href=\"#ButternutSquashCassrole\">\n            <ListItemText primary=\"ButternutSquashCassrole\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#ChickenBroccoliCasserole\">\n            <ListItemText primary=\"ChickenBroccoliCasserole\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#Chili\">\n            <ListItemText primary=\"Chili\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#ChristmasMorningSaver\">\n            <ListItemText primary=\"ChristmasMorningSaver\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#DakGalbi\">\n            <ListItemText primary=\"DakGalbi\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#DillPickleSoup\">\n            <ListItemText primary=\"DillPickleSoup\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#EggplantMincedPork\">\n            <ListItemText primary=\"EggplantMincedPork\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#FestiveTurnip\">\n            <ListItemText primary=\"FestiveTurnip\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#GrilledSweetPotato\">\n            <ListItemText primary=\"GrilledSweetPotato\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#LeekPotatoSoup\">\n            <ListItemText primary=\"LeekPotatoSoup\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#MintyCookies\">\n            <ListItemText primary=\"MintyCookies\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#ShrimpSquashRisotto\">\n            <ListItemText primary=\"ShrimpSquashRisotto\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#SoySrirachaSauce\">\n            <ListItemText primary=\"SoySrirachaSauce\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"#VidaliaOnionDip\">\n            <ListItemText primary=\"VidaliaOnionDip\" />\n          </ListItem>\n        </List>\n      </div>\n    </MuiDrawer>\n  );\n};\n\nexport default Drawer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Typography} from \"@material-ui/core\";\n\nconst Section = ({type, title, items}) => {\n  const List = type === \"ingredients\" ? \"ul\" : \"ol\";\n  const defaultTitle = type === \"ingredients\" ? \"Ingredients\" : \"Directions\";\n\n  return (\n    <div>\n      <Typography variant=\"h6\">{title || defaultTitle}</Typography>\n      <List>\n        {items.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nSection.propTypes = {\n  type: PropTypes.oneOf([\"ingredients\", \"directions\"]).isRequired,\n  title: PropTypes.string,\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nimport Section from \"./Section\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(2),\n  },\n}));\n\nconst Recipe = ({name, sections}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h5\">{name}</Typography>\n      {sections.map((section, index) => (\n        <Section key={index} {...section} />\n      ))}\n    </div>\n  );\n};\n\nRecipe.propTypes = {\n  name: PropTypes.string.isRequired,\n  sections: PropTypes.arrayOf(Section).isRequired,\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst ButternutSquashSoup = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>1 large onion</li>\n      <li>2 stalks celery</li>\n      <li>2 carrots</li>\n      <li>2 potatoes</li>\n      <li>1 butternut squash</li>\n      <li>1L chicken broth</li>\n      <li>.5t cayenne pepper</li>\n      <li>1T yellow curry powder</li>\n      <li>.5C sour cream</li>\n      <li>salt</li>\n      <li>pepper</li>\n      <li>butter</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Roast the butternut squash (whole, peel on) for 1 hour at 375F</li>\n      <li>Finely chop all vegetables</li>\n      <li>\n        Melt some butter in a large pot, and fry the vegetables until lightly\n        browned (~5 minutes)\n      </li>\n      <li>Pour in enough of the chicken broth to cover the vegetables</li>\n      <li>Add cayenne, curry, salt, pepper</li>\n      <li>Add the butternut squash</li>\n      <li>Bring to a boil, reduce heat, cover, simmer for ~45 minutes</li>\n      <li>Blend soup until smooth</li>\n      <li>Add remaining chicken broth until desired consistency</li>\n      <li>Mix in sour cream</li>\n    </ol>\n  </div>\n);\n\nexport default ButternutSquashSoup;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst ChickenBroccoliCasserole = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>500g broccoli, chopped (4ish cups)</li>\n      <li>1 large onion, chopped</li>\n      <li>2 stalks celery, chopped</li>\n      <li>1-2 cups chicken broth</li>\n      <li>1 can (~150ml) water chestnuts, drained</li>\n      <li>1 can cream of mushroom soup</li>\n      <li>1 can sliced mushrooms, drained</li>\n      <li>1 cup uncooked rice (2ish cups cooked)</li>\n      <li>2-3 chicken breasts</li>\n      <li>1 cup shredded cheddar cheese</li>\n      <li>1/4 cup butter</li>\n      <li>1 tbsp garlic powder</li>\n      <li>salt, pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Cube and cook the chicken separately</li>\n      <li>Cook the rice separately</li>\n      <li>Melt the butter in a large skillet and saute the onion and celery</li>\n      <li>\n        Slowly add chicken broth to the saute and continue until celery is\n        somewhat tender\n      </li>\n      <li>Stir in the soup and remaining chicken broth</li>\n      <li>Add the broccoli, water chestnuts, mushrooms, rice, and chicken</li>\n      <li>Add garlic powder, salt, and pepper</li>\n      <li>Cook for about 5 minutes</li>\n      <li>\n        Mix in the cheese, spread in a 9x13 baking dish and bake for 30 minutes\n        at 325F\n      </li>\n    </ol>\n  </div>\n);\n\nexport default ChickenBroccoliCasserole;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst Chili = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>2 pounds ground beef</li>\n      <li>4 (15 ounce) cans various chili beans, drained</li>\n      <li>2 (28 ounce) cans diced tomatoes with juice</li>\n      <li>1 (6 ounce) can tomato paste</li>\n      <li>1 (~300ml) can sliced mushrooms</li>\n      <li>1 large yellow onion, chopped</li>\n      <li>3 stalks celery, chopped</li>\n      <li>2 bell peppers, seeded and chopped</li>\n      <li>2 green chili peppers, seeded and chopped</li>\n      <li>4 cubes beef bouillon</li>\n      <li>1/2 cup beer</li>\n      <li>1/4 cup chili powder</li>\n      <li>1 tablespoon Worcestershire sauce</li>\n      <li>1 tablespoon minced garlic</li>\n      <li>1 tablespoon dried oregano</li>\n      <li>2 teaspoons ground cumin</li>\n      <li>2 teaspoons hot pepper sauce (e.g. Tabasco)</li>\n      <li>1 teaspoon dried basil</li>\n      <li>1 teaspoon salt</li>\n      <li>1 teaspoon ground black pepper</li>\n      <li>1 teaspoon cayenne pepper</li>\n      <li>1 teaspoon paprika</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>\n        In a large stock pot, cook the ground beef until evenly browned and\n        drain off extra grease\n      </li>\n      <li>\n        Add chili beans, diced tomatoes, tomato paste, all chopped veggies,\n        bouillon, beer, and remaining spices\n      </li>\n      <li>\n        Stir to blend, then cover and simmer over low heat for 2 hours. Stir\n        occasionally\n      </li>\n      <li>Taste, and add salt/pepper/chili powder, if necessary</li>\n    </ol>\n  </div>\n);\n\nexport default Chili;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst ChristmasMorningSaver = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>~16 slices of bread, crust removed</li>\n      <li>slices of ham or Canadian back bacon</li>\n      <li>slices of sharp cheddar cheese</li>\n      <li>6 eggs</li>\n      <li>1/4 cup minced onion</li>\n      <li>1/4 cup green pepper, finely chopped</li>\n      <li>1/2 teaspoon pepper</li>\n      <li>1/2 teaspoon salt</li>\n      <li>1 teaspoon dry mustard</li>\n      <li>2 teaspoons Worchestershire sauce</li>\n      <li>3 cups milk</li>\n      <li>Tabasco sauce to taste</li>\n      <li>1/2 cup butter</li>\n      <li>Special K or similar dry cereal</li>\n    </ul>\n    <Typography variant=\"h4\">Directions (Prep the night before)</Typography>\n    <ol>\n      <li>\n        Butter a 9\"x13\" glass baking dish, and cover with a layer of bread\n        slices.\n      </li>\n      <li>Cover the bread layer with slices of ham.</li>\n      <li>Cover the ham layer with slices of cheese.</li>\n      <li>Finish with a layer of bread, making a giant sandwich.</li>\n      <li>In a bowl, beat eggs, salt, and pepper.</li>\n      <li>\n        Add dry mustard, onion, green pepper, Worchestershire, milk, and\n        Tabasco.\n      </li>\n      <li>Pour the egg mixture over the sandwiches.</li>\n      <li>Cover and refrigerate overnight.</li>\n    </ol>\n    <Typography variant=\"h4\">Directions (Morning)</Typography>\n    <ol>\n      <li>Melt 1/2 cup of butter, and pour over egg sandwiches.</li>\n      <li>Cover with Special K.</li>\n      <li>Bake for 45 minutes, at 325F.</li>\n      <li>Let stand for 10 minutes before serving.</li>\n    </ol>\n  </div>\n);\n\nexport default ChristmasMorningSaver;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst DakGalbi = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients (Sauce)</Typography>\n    <ul>\n      <li>2 tbsp red pepper powder</li>\n      <li>3 tbsp red pepper paste</li>\n      <li>4 tsp curry powder</li>\n      <li>3 cloves minced garlic</li>\n      <li>3 tbsp soy sauce</li>\n      <li>2 tbsp cooking wine</li>\n      <li>2 tbsp minced ginger</li>\n      <li>black pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Ingredients (Chicken)</Typography>\n    <ul>\n      <li>2 chicken breasts</li>\n      <li>1 tbsp cooking wine</li>\n      <li>2 cloves minced garlic</li>\n      <li>black pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Ingredients (Stir-fry)</Typography>\n    <ul>\n      <li>4 green onions</li>\n      <li>3 onions</li>\n      <li>1/2 head of cabbage</li>\n      <li>2 sweet potatoes</li>\n      <li>1 package of Asian rice cakes (650g)</li>\n      <li>water</li>\n      <li>olive oil</li>\n      <li>sesame oil</li>\n      <li>sesame seeds</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Chop up chicken, mix with the chicken ingredients, set aside</li>\n      <li>Soak rice cakes until thawed</li>\n      <li>\n        Mix up sauce ingredients in a bowl, add 1/3 of this sauce to the\n        marinating chicken, and set aside\n      </li>\n      <li>\n        Chop onions, cabbage, and sweet potato into thin, bite-sized pieces\n      </li>\n      <li>Pour equal amounts of sesame and olive oil in a hot wok</li>\n      <li>\n        Fry cabbage, onion, sweet potato, and rice cakes (cover and add water)\n        until they are tender\n      </li>\n      <li>Add in chicken and remaining sauce</li>\n      <li>Near the end, add in chopped green onion</li>\n      <li>Add sesame seeds</li>\n    </ol>\n  </div>\n);\n\nexport default DakGalbi;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst DillPickleSoup = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>5-1/2 cups chicken broth</li>\n      <li>6-1/2 cups russet potatos, peeled and cubed</li>\n      <li>2 cups chopped carrots</li>\n      <li>1 cup chopped dill pickles</li>\n      <li>1/2 cup unsalted butter</li>\n      <li>1/2 cup all-purpose flour</li>\n      <li>1 cup sour cream</li>\n      <li>1/4 cup water</li>\n      <li>2 cups dill pickle juice</li>\n      <li>1-1/2 teaspoons Old Bay seasoning</li>\n      <li>\n        1/2 teaspoon table salt (depending on how salty your pickle juice is)\n      </li>\n      <li>1/2 teaspoon coarsely ground pepper</li>\n      <li>1/4 teaspoon cayenne pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>\n        In a large pot, combine broth, potatoes, carrots and butter. Bring to a\n        boil and cook until the potatoes are tender.\n      </li>\n      <li>Add pickles and continue to boil.</li>\n      <li>\n        In a medium bowl, stir together flour, sour cream and water, making a\n        paste.\n      </li>\n      <li>\n        Whisk sour cream mixture (a couple tablespoons at a time) into soup.\n      </li>\n      <li>Add pickle juice, Old Bay, salt, pepper and cayenne.</li>\n      <li>Cook 5 more minutes and remove from heat.</li>\n    </ol>\n  </div>\n);\n\nexport default DillPickleSoup;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst EggplantMincedPork = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>400g ground pork</li>\n      <li>1 tablespoon soy sauce</li>\n      <li>1 teaspoon pepper</li>\n      <li>1 tablespoon sesame oil</li>\n      <li>4 cloves garlic</li>\n      <li>3 Japanese eggplants, diced</li>\n      <li>150ml chicken stock</li>\n      <li>3 tablespoons chilli bean paste (doubanjiang)</li>\n      <li>1 teaspoon vinegar</li>\n      <li>1 teaspoon fish sauce</li>\n      <li>1 teaspoon sesame oil</li>\n      <li>2 green onions (optional)</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>\n        Mix pork mince with soy sauce, pepper and sesame oil then marinate for\n        at least 10 minutes\n      </li>\n      <li>\n        Heat 2 tablespoons of oil in a preheated wok. Sauté half of the garlic\n        until fragrant\n      </li>\n      <li>\n        Add the eggplant. Gradually stir in the stock, stir-fry until the\n        eggplant turns from purple to brown, remove and set aside\n      </li>\n      <li>\n        Heat a tablespoon of oil in the hot wok, sauté the other half of the\n        garlic until fragrant. Add minced pork and stir-fry until opaque\n      </li>\n      <li>\n        Add chilli bean paste, eggplant, vinegar, fish sauce and sesame oil then\n        stir well. Sprinkle in green onions and serve\n      </li>\n    </ol>\n  </div>\n);\n\nexport default EggplantMincedPork;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst FestiveTurnip = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients (Main)</Typography>\n    <ul>\n      <li>1 large rutabaga</li>\n      <li>2 cooking apples (i.e. Cortland)</li>\n      <li>2 tablespoons butter</li>\n      <li>1/4 cup brown sugar</li>\n      <li>a dash of cinnamon</li>\n    </ul>\n    <Typography variant=\"h4\">Ingredients (Topping)</Typography>\n    <ul>\n      <li>1/3 cup brown sugar</li>\n      <li>1/3 cup flour</li>\n      <li>2 tablespoons butter</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Peel and dice the turnip, and boil until tender.</li>\n      <li>Drain, and mash with butter.</li>\n      <li>Peel and slice the apples, and mix with brown sugar and cinnamon.</li>\n      <li>In a greased baking dish, spread 1/2 of the turnip.</li>\n      <li>Add the apple mixuture ad the next layer.</li>\n      <li>Add the remaining turnip as the next layer.</li>\n      <li>\n        In a small bowl, mix brown sugar, flour, and butter until crumbly.\n      </li>\n      <li>Sprinkle on top of turnip.</li>\n      <li>Bake for 1 hour at 350F.</li>\n    </ol>\n  </div>\n);\n\nexport default FestiveTurnip;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst GrilledSweetPotato = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>2 sweet potatoes</li>\n      <li>2 tbsp olive oil</li>\n      <li>2 tbsp brown sugar</li>\n      <li>1 tbsp cumin</li>\n      <li>1 tsp cayenne</li>\n      <li>salt and pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Cut up potatoes, and mix all ingredients in a bowl</li>\n      <li>Wrap in aluminium foil pouch</li>\n      <li>Cook on BBQ for ~25 minutes, turning 2-3 times throughout</li>\n    </ol>\n  </div>\n);\n\nexport default GrilledSweetPotato;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst LeekPotatoSoup = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>2+ tbsp butter</li>\n      <li>2 leeks, chopped</li>\n      <li>1 large onion, chopped</li>\n      <li>5 cups potatoes, peeled and cubed</li>\n      <li>4 cups chicken broth</li>\n      <li>1 cup blend cream (10%)</li>\n      <li>1+ teaspoon garlic powder</li>\n      <li>salt and pepper</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Melt butter in a pot over medium heat</li>\n      <li>\n        Cook and stir leeks and onion until vegetables are tender, about 5\n        minutes\n      </li>\n      <li>\n        Add potatoes and chicken broth and simmer until potatoes are tender,\n        about 20 minutes\n      </li>\n      <li>Add cream, and simmer until slightly thickened, about 15 minutes</li>\n      <li>\n        Blend (optional) and add garlic powder, salt, and pepper, and simmer for\n        another 5 minutes\n      </li>\n    </ol>\n  </div>\n);\n\nexport default LeekPotatoSoup;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst MintyCookies = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>1 cup butter flavored Crisco</li>\n      <li>1 package (8 oz) cream cheese, softened</li>\n      <li>3/4 cup granulated sugar</li>\n      <li>1/2 cup firmly packed brown sugar</li>\n      <li>1 tsp vanilla</li>\n      <li>2 cups all-purpose flour</li>\n      <li>1 3/4 cups mint chocolate chips</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Heat oven to 375F</li>\n      <li>Combine Crisco, cream cheese, sugars and vanilla in large bowl</li>\n      <li>Beat at medium speed of electric mixer until well blended</li>\n      <li>Mix flour into creamed mixture at low speed until just blended</li>\n      <li>Stir in mint chocolate chips</li>\n      <li>\n        Form balls of 3-4cm diameter, and press slightly onto baking sheet\n      </li>\n      <li>Bake for 11 minutes, or until lightly browned</li>\n      <li>Cool for 2 minutes on baking sheet, then move to cooling rack</li>\n    </ol>\n  </div>\n);\n\nexport default MintyCookies;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst ShripSquashRisotto = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>2 packs of PC 4 cheese risotto (2x170g)</li>\n      <li>1 butternut squash (~1 pound, cubed)</li>\n      <li>25 shrimp</li>\n      <li>garlic (or garlic powder)</li>\n      <li>salt</li>\n      <li>pepper</li>\n      <li>butter</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>\n        Cut butternut squash into bite-size cubes (1-2cm), toss in oil, and\n        roast for ~40 minutes at 375F\n      </li>\n      <li>\n        Make risotto according to package instructions (basically like KD)\n      </li>\n      <li>\n        Toss shrimp in oil, salt, pepper, and minced garlic (or garlic powder)\n      </li>\n      <li>Fry shrimp until fully cooked</li>\n      <li>Mix everything together, and add pepper to taste</li>\n    </ol>\n  </div>\n);\n\nexport default ShripSquashRisotto;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst SoySrirachaSauce = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>1 tsp sesame oil</li>\n      <li>3 tbsp soy sauce</li>\n      <li>1 tbsp grainy mustard</li>\n      <li>1+ tsp sriracha sauce</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>mix together</li>\n    </ol>\n  </div>\n);\n\nexport default SoySrirachaSauce;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nconst VidaliaOnionDip = () => (\n  <div>\n    <Typography variant=\"h4\">Ingredients</Typography>\n    <ul>\n      <li>8 oz cream cheese</li>\n      <li>1/2 cup mayonaise</li>\n      <li>1 cup vidalia onion, finely chopped</li>\n      <li>1/4 cup parmesan cheese</li>\n      <li>1+ tsp Frank's Red Hot</li>\n      <li>salt</li>\n      <li>pepper</li>\n      <li>paprika</li>\n    </ul>\n    <Typography variant=\"h4\">Directions</Typography>\n    <ol>\n      <li>Mix together, and spread in a shallow baking dish.</li>\n      <li>Sprinkle with paprika.</li>\n      <li>Bake for 40 minutes at 350F.</li>\n    </ol>\n  </div>\n);\n\nexport default VidaliaOnionDip;\n","import React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport Recipe from \"../Recipe\";\nimport {recipes} from \"../../recipes\";\n\nimport ButternutSquashCassrole from \"../../recipes/ButternutSquashCassrole\";\nimport ChickenBroccoliCasserole from \"../../recipes/ChickenBroccoliCasserole\";\nimport Chili from \"../../recipes/Chili\";\nimport ChristmasMorningSaver from \"../../recipes/ChristmasMorningSaver\";\nimport DakGalbi from \"../../recipes/DakGalbi\";\nimport DillPickleSoup from \"../../recipes/DillPickleSoup\";\nimport EggplantMincedPork from \"../../recipes/EggplantMincedPork\";\nimport FestiveTurnip from \"../../recipes/FestiveTurnip\";\nimport GrilledSweetPotato from \"../../recipes/GrilledSweetPotato\";\nimport LeekPotatoSoup from \"../../recipes/LeekPotatoSoup\";\nimport MintyCookies from \"../../recipes/MintyCookies\";\nimport ShrimpSquashRisotto from \"../../recipes/ShrimpSquashRisotto\";\nimport SoySrirachaSauce from \"../../recipes/SoySrirachaSauce\";\nimport VidaliaOnionDip from \"../../recipes/VidaliaOnionDip\";\n\nconst Router = () => (\n  <HashRouter hashType=\"noslash\">\n    <Switch>\n      {recipes.map(recipe => (\n        <Route\n          key={recipe.key}\n          path={`/${recipe.key}`}\n          render={() => (\n            <Recipe name={recipe.name} sections={recipe.sections} />\n          )}\n        />\n      ))}\n      <Route\n        path=\"/ButternutSquashCassrole\"\n        component={ButternutSquashCassrole}\n      />\n      <Route\n        path=\"/ChickenBroccoliCasserole\"\n        component={ChickenBroccoliCasserole}\n      />\n      <Route path=\"/Chili\" component={Chili} />\n      <Route path=\"/ChristmasMorningSaver\" component={ChristmasMorningSaver} />\n      <Route path=\"/DakGalbi\" component={DakGalbi} />\n      <Route path=\"/DillPickleSoup\" component={DillPickleSoup} />\n      <Route path=\"/EggplantMincedPork\" component={EggplantMincedPork} />\n      <Route path=\"/FestiveTurnip\" component={FestiveTurnip} />\n      <Route path=\"/GrilledSweetPotato\" component={GrilledSweetPotato} />\n      <Route path=\"/LeekPotatoSoup\" component={LeekPotatoSoup} />\n      <Route path=\"/MintyCookies\" component={MintyCookies} />\n      <Route path=\"/ShrimpSquashRisotto\" component={ShrimpSquashRisotto} />\n      <Route path=\"/SoySrirachaSauce\" component={SoySrirachaSauce} />\n      <Route path=\"/VidaliaOnionDip\" component={VidaliaOnionDip} />\n\n      <Route exact path=\"/\">\n        Pick a recipe from the menu!\n      </Route>\n      <Route>Recipe not found!</Route>\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React, {useState} from \"react\";\nimport {withTheme} from \"./theme\";\nimport AppBar from \"./components/AppBar\";\nimport Drawer from \"./components/Drawer\";\nimport Router from \"./components/Router\";\n\nconst App = () => {\n  const [isDrawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <div>\n      <AppBar isDrawerOpen={isDrawerOpen} setDrawerOpen={setDrawerOpen} />\n      <Drawer isDrawerOpen={isDrawerOpen} setDrawerOpen={setDrawerOpen} />\n      <Router />\n    </div>\n  );\n};\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}