{"version":3,"sources":["theme.js","components/AppBar.js","recipes.js","components/Drawer.js","components/Recipe/Section.js","components/Recipe/index.js","components/Router/index.js","App.js","serviceWorker.js","index.js"],"names":["Component","theme","createMuiTheme","palette","primary","deepPurple","typography","useNextVariants","mixins","toolbar","minHeight","useStyles","makeStyles","menuButton","marginLeft","martinRight","AppBar","props","isDrawerOpen","setDrawerOpen","classes","position","Toolbar","IconButton","className","color","onClick","Menu","Typography","variant","noWrap","recipes","key","name","sections","type","items","list","width","Drawer","closeDrawer","open","onClose","tabIndex","role","onKeyDown","map","recipe","ListItem","button","component","href","ListItemText","Section","title","List","defaultTitle","item","root","margin","spacing","Recipe","section","index","Router","hashType","path","render","exact","withTheme","useState","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAmBkBA,E,wEAdZC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,KAEXC,WAAY,CACVC,iBAAiB,GAEnBC,OAAQ,CACNC,QAAS,CACPC,UAAW,O,gDCJXC,EAAYC,aAAW,iBAAO,CAClCC,WAAY,CACVC,YAAa,GACbC,YAAa,QA0BFC,EAtBA,SAAAC,GAAU,IAChBC,EAA+BD,EAA/BC,aAAcC,EAAiBF,EAAjBE,cACfC,EAAUT,IAEhB,OACE,kBAAC,IAAD,CAAWU,SAAS,UAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWJ,EAAQP,WACnBY,MAAM,UACNC,QAAS,kBAAMP,GAAeD,KAE9B,kBAACS,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAM,UAAUK,QAAM,GAA/C,c,gCC/BFC,EAAU,CACd,CACEC,IAAK,uBACLC,KAAM,uBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,oBACA,4BACA,qBACA,yBACA,4BACA,0BACA,0BAGJ,CACED,KAAM,aACNC,MAAO,CAAC,mBAId,CACEJ,IAAK,qBACLC,KAAM,qBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,gCACA,+BACA,mBACA,4BACA,gCACA,8BAGJ,CACED,KAAM,aACNC,MAAO,CACL,4CACA,iCACA,kCAKR,CACEJ,IAAK,sBACLC,KAAM,sBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,8BACA,iBACA,uCACA,gBACA,cACA,oBAGJ,CACED,KAAM,aACNC,MAAO,CACL,2BACA,wBACA,8BAKR,CACEJ,IAAK,6BACLC,KAAM,6BACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,gBACA,kBACA,YACA,aACA,qBACA,mBACA,qBACA,yBACA,iBACA,OACA,SACA,WAGJ,CACED,KAAM,aACNC,MAAO,CACL,iEACA,6BACA,6FACA,8DACA,mCACA,2BACA,8DACA,0BACA,wDACA,wBAKR,CACEJ,IAAK,6BACLC,KAAM,6BACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,qCACA,yBACA,2BACA,yBACA,0CACA,+BACA,kCACA,yCACA,sBACA,gCACA,iBACA,uBACA,iBAGJ,CACED,KAAM,aACNC,MAAO,CACL,uCACA,2BACA,oEACA,qFACA,+CACA,kEACA,sCACA,2BACA,sFAKR,CACEJ,IAAK,QACLC,KAAM,QACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,uBACA,iDACA,8CACA,+BACA,kCACA,gCACA,2BACA,qCACA,4CACA,wBACA,eACA,uBACA,oCACA,6BACA,6BACA,2BACA,8CACA,yBACA,kBACA,iCACA,4BACA,uBAGJ,CACED,KAAM,aACNC,MAAO,CACL,6FACA,2GACA,oFACA,4DAKR,CACEJ,IAAK,0BACLC,KAAM,0BACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,qCACA,uCACA,iCACA,SACA,uBACA,uCACA,sBACA,oBACA,yBACA,oCACA,cACA,yBACA,iBACA,oCAGJ,CACED,KAAM,aACNC,MAAO,CACL,6EACA,4CACA,6CACA,yDACA,0CACA,4EACA,4CACA,qCAGJ,CACED,KAAM,aACNC,MAAO,CACL,wDACA,wBACA,gCACA,+CAKR,CACEJ,IAAK,YACLC,KAAM,YACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,2BACA,0BACA,qBACA,yBACA,mBACA,sBACA,uBACA,iBAGJ,CACED,KAAM,cACNC,MAAO,CACL,oBACA,sBACA,yBACA,iBAGJ,CACED,KAAM,cACNC,MAAO,CACL,iBACA,WACA,sBACA,mBACA,uCACA,QACA,YACA,aACA,iBAGJ,CACED,KAAM,aACNC,MAAO,CACL,+DACA,+BACA,qGACA,sEACA,0DACA,+FACA,qCACA,2CACA,uBAKR,CACEJ,IAAK,mBACLC,KAAM,mBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,2BACA,8CACA,yBACA,6BACA,0BACA,4BACA,mBACA,gBACA,2BACA,oCACA,wEACA,sCACA,gCAGJ,CACED,KAAM,aACNC,MAAO,CACL,uHACA,oCACA,+EACA,uEACA,uDACA,gDAKR,CACEJ,IAAK,uBACLC,KAAM,uBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,mBACA,yBACA,oBACA,0BACA,kBACA,8BACA,sBACA,gDACA,qBACA,wBACA,wBACA,8BAGJ,CACED,KAAM,aACNC,MAAO,CACL,6FACA,2FACA,8HACA,2IACA,6HAKR,CACEJ,IAAK,iBACLC,KAAM,iBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,mBACA,mCACA,uBACA,sBACA,uBAGJ,CACED,KAAM,cACNC,MAAO,CAAC,sBAAuB,gBAAiB,yBAElD,CACED,KAAM,aACNC,MAAO,CACL,mDACA,+BACA,oEACA,sDACA,4CACA,8CACA,qEACA,6BACA,+BAKR,CACEJ,IAAK,uBACLC,KAAM,uBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,mBACA,mBACA,qBACA,eACA,gBACA,oBAGJ,CACED,KAAM,aACNC,MAAO,CACL,qDACA,+BACA,gEAKR,CACEJ,IAAK,mBACLC,KAAM,mBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,iBACA,mBACA,yBACA,oCACA,uBACA,0BACA,4BACA,oBAGJ,CACED,KAAM,aACNC,MAAO,CACL,wCACA,6EACA,wFACA,mEACA,iGAKR,CACEJ,IAAK,gBACLC,KAAM,gBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,+BACA,0CACA,2BACA,oCACA,gBACA,2BACA,oCAGJ,CACED,KAAM,aACNC,MAAO,CACL,oBACA,iEACA,4DACA,iEACA,+BACA,qEACA,gDACA,oEAKR,CACEJ,IAAK,wBACLC,KAAM,wBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,0CACA,uCACA,YACA,4BACA,OACA,SACA,WAGJ,CACED,KAAM,aACNC,MAAO,CACL,oGACA,qEACA,yEACA,gCACA,uDAKR,CACEJ,IAAK,qBACLC,KAAM,qBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,mBACA,mBACA,wBACA,0BAGJ,CACED,KAAM,aACNC,MAAO,CAAC,mBAId,CACEJ,IAAK,oBACLC,KAAM,oBACNC,SAAU,CACR,CACEC,KAAM,cACNC,MAAO,CACL,oBACA,oBACA,sCACA,0BACA,yBACA,OACA,SACA,YAGJ,CACED,KAAM,aACNC,MAAO,CACL,qDACA,yBACA,oCC3hBJzB,EAAYC,aAAW,SAAAX,GAAK,MAAK,CACrCoC,KAAM,CACJC,MAAO,SAmCIC,EA/BA,SAAAtB,GAAU,IAChBC,EAA+BD,EAA/BC,aAAcC,EAAiBF,EAAjBE,cACfC,EAAUT,IAEV6B,EAAc,kBAAMrB,GAAc,IAExC,OACE,kBAAC,IAAD,CAAWsB,KAAMvB,EAAcwB,QAASF,GACtC,yBACEG,SAAU,EACVC,KAAK,SACLlB,QAASc,EACTK,UAAWL,GAEX,kBAAC,IAAD,CAAMhB,UAAWJ,EAAQiB,MACtBN,EAAQe,KAAI,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,CACEhB,IAAKe,EAAOf,IACZiB,QAAM,EACNC,UAAU,IACVC,KAAI,WAAMJ,EAAOf,MAEjB,kBAACoB,EAAA,EAAD,CAAchD,QAAS2C,EAAOd,e,gBCb7BoB,EAtBC,SAAC,GAA0B,IAAzBlB,EAAwB,EAAxBA,KAAMmB,EAAkB,EAAlBA,MAAOlB,EAAW,EAAXA,MACvBmB,EAAgB,gBAATpB,EAAyB,KAAO,KACvCqB,EAAwB,gBAATrB,EAAyB,cAAgB,aAE9D,OACE,6BACE,kBAACP,EAAA,EAAD,CAAYC,QAAQ,MAAMyB,GAASE,GACnC,kBAACD,EAAD,KACGnB,EAAMU,KAAI,SAAAW,GAAI,OACb,wBAAIzB,IAAKyB,GAAOA,SCNpB9C,EAAYC,aAAW,SAAAX,GAAK,MAAK,CACrCyD,KAAM,CACJC,OAAQ1D,EAAM2D,QAAQ,QAqBXC,EAjBA,SAAC,GAAsB,IAArB5B,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACfd,EAAUT,IAChB,OACE,yBAAKa,UAAWJ,EAAQsC,MACtB,kBAAC9B,EAAA,EAAD,CAAYC,QAAQ,MAAMI,GACzBC,EAASY,KAAI,SAACgB,EAASC,GAAV,OACZ,kBAAC,EAAD,eAAS/B,IAAK+B,GAAWD,SCQlBE,EArBA,kBACb,kBAAC,IAAD,CAAYC,SAAS,WACnB,kBAAC,IAAD,KACGlC,EAAQe,KAAI,SAAAC,GAAM,OACjB,kBAAC,IAAD,CACEf,IAAKe,EAAOf,IACZkC,KAAI,WAAMnB,EAAOf,KACjBmC,OAAQ,kBACN,kBAAC,EAAD,CAAQlC,KAAMc,EAAOd,KAAMC,SAAUa,EAAOb,iBAKlD,kBAAC,IAAD,CAAOkC,OAAK,EAACF,KAAK,KAAlB,gCAGA,kBAAC,IAAD,6BCJSG,GPCGrE,EObN,WAAO,IAAD,EACsBsE,oBAAS,GAD/B,mBACTpD,EADS,KACKC,EADL,KAGhB,OACE,6BACE,kBAAC,EAAD,CAAQD,aAAcA,EAAcC,cAAeA,IACnD,kBAAC,EAAD,CAAQD,aAAcA,EAAcC,cAAeA,IACnD,kBAAC,EAAD,QPMyB,SAAAF,GAAK,OAClC,kBAAC,IAAD,CAAkBhB,MAAOA,GACvB,kBAACsE,EAAA,EAAD,MACA,kBAACvE,EAAciB,MQVCuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca8aa638.chunk.js","sourcesContent":["import React from \"react\";\nimport {MuiThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\nimport {deepPurple} from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: deepPurple,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  mixins: {\n    toolbar: {\n      minHeight: 48,\n    },\n  },\n});\n\nconst withTheme = Component => props => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Component {...props} />\n  </MuiThemeProvider>\n);\nexport {withTheme};\n","import React from \"react\";\nimport {\n  AppBar as MuiAppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nconst useStyles = makeStyles(() => ({\n  menuButton: {\n    marginLeft: -12,\n    martinRight: 20,\n  },\n}));\n\nconst AppBar = props => {\n  const {isDrawerOpen, setDrawerOpen} = props;\n  const classes = useStyles();\n\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          onClick={() => setDrawerOpen(!isDrawerOpen)}\n        >\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          Recipes\n        </Typography>\n      </Toolbar>\n    </MuiAppBar>\n  );\n};\n\nexport default AppBar;\n","const recipes = [\n  {\n    key: \"asian-dumpling-sauce\",\n    name: \"Asian Dumpling Sauce\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1/4 cup soy sauce\",\n          \"1/4 cup rice wine vinegar\",\n          \"1 tablespoon honey\",\n          \"2 cloves minced garlic\",\n          \"2 teaspoons minced ginger\",\n          \"1 teaspoon sesame seeds\",\n          \"1 teaspoon sesame oil\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\"mix together\"],\n      },\n    ],\n  },\n  {\n    key: \"broccoli-casserole\",\n    name: \"Broccoli Casserole\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 bunches of broccoli (~300g)\",\n          \"1 can cream of mushroom soup\",\n          \"250ml sour cream\",\n          \"1 tablespoon minced onion\",\n          \"1 cup shredded cheddar cheese\",\n          \"15 Ritz crackers, crushed\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Cook broccoli until tener, and drain well\",\n          \"Mix with all other ingredients\",\n          \"Bake for 20 minutes at 350F\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"broccoli-slaw-salad\",\n    name: \"Broccoli Slaw Salad\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 packs of beef Mr. Noodles\",\n          \"4 green onions\",\n          \"1 cup roasted/salted sunflower seeds\",\n          \"1/2 cup sugar\",\n          \"3/4 cup oil\",\n          \"1/3 cup vinegar\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"smash up the dry noodles\",\n          \"chop the green onions\",\n          \"mix everything together\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"butternut-squash-casserole\",\n    name: \"Butternut Squash Casserole\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1 large onion\",\n          \"2 stalks celery\",\n          \"2 carrots\",\n          \"2 potatoes\",\n          \"1 butternut squash\",\n          \"1L chicken broth\",\n          \".5t cayenne pepper\",\n          \"1T yellow curry powder\",\n          \".5C sour cream\",\n          \"salt\",\n          \"pepper\",\n          \"butter\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Roast the butternut squash (whole, peel on) for 1 hour at 375F\",\n          \"Finely chop all vegetables\",\n          \"Melt some butter in a large pot, and fry the vegetables until lightly browned (~5 minutes)\",\n          \"Pour in enough of the chicken broth to cover the vegetables\",\n          \"Add cayenne, curry, salt, pepper\",\n          \"Add the butternut squash\",\n          \"Bring to a boil, reduce heat, cover, simmer for ~45 minutes\",\n          \"Blend soup until smooth\",\n          \"Add remaining chicken broth until desired consistency\",\n          \"Mix in sour cream\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"chicken-broccoli-casserole\",\n    name: \"Chicken Broccoli Casserole\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"500g broccoli, chopped (4ish cups)\",\n          \"1 large onion, chopped\",\n          \"2 stalks celery, chopped\",\n          \"1-2 cups chicken broth\",\n          \"1 can (~150ml) water chestnuts, drained\",\n          \"1 can cream of mushroom soup\",\n          \"1 can sliced mushrooms, drained\",\n          \"1 cup uncooked rice (2ish cups cooked)\",\n          \"2-3 chicken breasts\",\n          \"1 cup shredded cheddar cheese\",\n          \"1/4 cup butter\",\n          \"1 tbsp garlic powder\",\n          \"salt, pepper\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Cube and cook the chicken separately\",\n          \"Cook the rice separately\",\n          \"Melt the butter in a large skillet and saute the onion and celery\",\n          \"Slowly add chicken broth to the saute and continue until celery is somewhat tender\",\n          \"Stir in the soup and remaining chicken broth\",\n          \"Add the broccoli, water chestnuts, mushrooms, rice, and chicken\",\n          \"Add garlic powder, salt, and pepper\",\n          \"Cook for about 5 minutes\",\n          \"Mix in the cheese, spread in a 9x13 baking dish and bake for 30 minutes at 325F\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"chili\",\n    name: \"Chili\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 pounds ground beef\",\n          \"4 (15 ounce) cans various chili beans, drained\",\n          \"2 (28 ounce) cans diced tomatoes with juice\",\n          \"1 (6 ounce) can tomato paste\",\n          \"1 (~300ml) can sliced mushrooms\",\n          \"1 large yellow onion, chopped\",\n          \"3 stalks celery, chopped\",\n          \"2 bell peppers, seeded and chopped\",\n          \"2 green chili peppers, seeded and chopped\",\n          \"4 cubes beef bouillon\",\n          \"1/2 cup beer\",\n          \"1/4 cup chili powder\",\n          \"1 tablespoon Worcestershire sauce\",\n          \"1 tablespoon minced garlic\",\n          \"1 tablespoon dried oregano\",\n          \"2 teaspoons ground cumin\",\n          \"2 teaspoons hot pepper sauce (e.g. Tabasco)\",\n          \"1 teaspoon dried basil\",\n          \"1 teaspoon salt\",\n          \"1 teaspoon ground black pepper\",\n          \"1 teaspoon cayenne pepper\",\n          \"1 teaspoon paprika\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"In a large stock pot, cook the ground beef until evenly browned and drain off extra grease\",\n          \"Add chili beans, diced tomatoes, tomato paste, all chopped veggies, bouillon, beer, and remaining spices\",\n          \"Stir to blend, then cover and simmer over low heat for 2 hours. Stir occasionally\",\n          \"Taste, and add salt/pepper/chili powder, if necessary\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"christmas-morning-saver\",\n    name: \"Christmas Morning Saver\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"~16 slices of bread, crust removed\",\n          \"slices of ham or Canadian back bacon\",\n          \"slices of sharp cheddar cheese\",\n          \"6 eggs\",\n          \"1/4 cup minced onion\",\n          \"1/4 cup green pepper, finely chopped\",\n          \"1/2 teaspoon pepper\",\n          \"1/2 teaspoon salt\",\n          \"1 teaspoon dry mustard\",\n          \"2 teaspoons Worchestershire sauce\",\n          \"3 cups milk\",\n          \"Tabasco sauce to taste\",\n          \"1/2 cup butter\",\n          \"Special K or similar dry cereal\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          'Butter a 9\"x13\" glass baking dish, and cover with a layer of bread slices.',\n          \"Cover the bread layer with slices of ham.\",\n          \"Cover the ham layer with slices of cheese.\",\n          \"Finish with a layer of bread, making a giant sandwich.\",\n          \"In a bowl, beat eggs, salt, and pepper.\",\n          \"Add dry mustard, onion, green pepper, Worchestershire, milk, and Tabasco.\",\n          \"Pour the egg mixture over the sandwiches.\",\n          \"Cover and refrigerate overnight.\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Melt 1/2 cup of butter, and pour over egg sandwiches.\",\n          \"Cover with Special K.\",\n          \"Bake for 45 minutes, at 325F.\",\n          \"Let stand for 10 minutes before serving.\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"dak-galbi\",\n    name: \"Dak Galbi\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 tbsp red pepper powder\",\n          \"3 tbsp red pepper paste\",\n          \"4 tsp curry powder\",\n          \"3 cloves minced garlic\",\n          \"3 tbsp soy sauce\",\n          \"2 tbsp cooking wine\",\n          \"2 tbsp minced ginger\",\n          \"black pepper\",\n        ],\n      },\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 chicken breasts\",\n          \"1 tbsp cooking wine\",\n          \"2 cloves minced garlic\",\n          \"black pepper\",\n        ],\n      },\n      {\n        type: \"ingredients\",\n        items: [\n          \"4 green onions\",\n          \"3 onions\",\n          \"1/2 head of cabbage\",\n          \"2 sweet potatoes\",\n          \"1 package of Asian rice cakes (650g)\",\n          \"water\",\n          \"olive oil\",\n          \"sesame oil\",\n          \"sesame seeds\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Chop up chicken, mix with the chicken ingredients, set aside\",\n          \"Soak rice cakes until thawed\",\n          \"Mix up sauce ingredients in a bowl, add 1/3 of this sauce to the marinating chicken, and set aside\",\n          \"Chop onions, cabbage, and sweet potato into thin, bite-sized pieces\",\n          \"Pour equal amounts of sesame and olive oil in a hot wok\",\n          \"Fry cabbage, onion, sweet potato, and rice cakes (cover and add water) until they are tender\",\n          \"Add in chicken and remaining sauce\",\n          \"Near the end, add in chopped green onion\",\n          \"Add sesame seeds\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"dill-pickle-soup\",\n    name: \"Dill Pickle Soup\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"5-1/2 cups chicken broth\",\n          \"6-1/2 cups russet potatos, peeled and cubed\",\n          \"2 cups chopped carrots\",\n          \"1 cup chopped dill pickles\",\n          \"1/2 cup unsalted butter\",\n          \"1/2 cup all-purpose flour\",\n          \"1 cup sour cream\",\n          \"1/4 cup water\",\n          \"2 cups dill pickle juice\",\n          \"1-1/2 teaspoons Old Bay seasoning\",\n          \"1/2 teaspoon table salt (depending on how salty your pickle juice is)\",\n          \"1/2 teaspoon coarsely ground pepper\",\n          \"1/4 teaspoon cayenne pepper\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"In a large pot, combine broth, potatoes, carrots and butter. Bring to a boil and cook until the potatoes are tender.\",\n          \"Add pickles and continue to boil.\",\n          \"In a medium bowl, stir together flour, sour cream and water, making a paste.\",\n          \"Whisk sour cream mixture (a couple tablespoons at a time) into soup.\",\n          \"Add pickle juice, Old Bay, salt, pepper and cayenne.\",\n          \"Cook 5 more minutes and remove from heat.\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"eggplant-minced-pork\",\n    name: \"Eggplant Minced Pork\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"400g ground pork\",\n          \"1 tablespoon soy sauce\",\n          \"1 teaspoon pepper\",\n          \"1 tablespoon sesame oil\",\n          \"4 cloves garlic\",\n          \"3 Japanese eggplants, diced\",\n          \"150ml chicken stock\",\n          \"3 tablespoons chilli bean paste (doubanjiang)\",\n          \"1 teaspoon vinegar\",\n          \"1 teaspoon fish sauce\",\n          \"1 teaspoon sesame oil\",\n          \"2 green onions (optional)\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Mix pork mince with soy sauce, pepper and sesame oil then marinate for at least 10 minutes\",\n          \"Heat 2 tablespoons of oil in a preheated wok. Sauté half of the garlic until fragrant\",\n          \"Add the eggplant. Gradually stir in the stock, stir-fry until the eggplant turns from purple to brown, remove and set aside\",\n          \"Heat a tablespoon of oil in the hot wok, sauté the other half of the garlic until fragrant. Add minced pork and stir-fry until opaque\",\n          \"Add chilli bean paste, eggplant, vinegar, fish sauce and sesame oil then stir well. Sprinkle in green onions and serve\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"festive-turnip\",\n    name: \"Festive Turnip\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1 large rutabaga\",\n          \"2 cooking apples (i.e. Cortland)\",\n          \"2 tablespoons butter\",\n          \"1/4 cup brown sugar\",\n          \"a dash of cinnamon\",\n        ],\n      },\n      {\n        type: \"ingredients\",\n        items: [\"1/3 cup brown sugar\", \"1/3 cup flour\", \"2 tablespoons butter\"],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Peel and dice the turnip, and boil until tender.\",\n          \"Drain, and mash with butter.\",\n          \"Peel and slice the apples, and mix with brown sugar and cinnamon.\",\n          \"In a greased baking dish, spread 1/2 of the turnip.\",\n          \"Add the apple mixuture ad the next layer.\",\n          \"Add the remaining turnip as the next layer.\",\n          \"In a small bowl, mix brown sugar, flour, and butter until crumbly.\",\n          \"Sprinkle on top of turnip.\",\n          \"Bake for 1 hour at 350F.\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"grilled-sweet-potato\",\n    name: \"Grilled Sweet Potato\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 sweet potatoes\",\n          \"2 tbsp olive oil\",\n          \"2 tbsp brown sugar\",\n          \"1 tbsp cumin\",\n          \"1 tsp cayenne\",\n          \"salt and pepper\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Cut up potatoes, and mix all ingredients in a bowl\",\n          \"Wrap in aluminium foil pouch\",\n          \"Cook on BBQ for ~25 minutes, turning 2-3 times throughout\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"leek-potato-soup\",\n    name: \"Leek Potato Soup\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2+ tbsp butter\",\n          \"2 leeks, chopped\",\n          \"1 large onion, chopped\",\n          \"5 cups potatoes, peeled and cubed\",\n          \"4 cups chicken broth\",\n          \"1 cup blend cream (10%)\",\n          \"1+ teaspoon garlic powder\",\n          \"salt and pepper\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Melt butter in a pot over medium heat\",\n          \"Cook and stir leeks and onion until vegetables are tender, about 5 minutes\",\n          \"Add potatoes and chicken broth and simmer until potatoes are tender, about 20 minutes\",\n          \"Add cream, and simmer until slightly thickened, about 15 minutes\",\n          \"Blend (optional) and add garlic powder, salt, and pepper, and simmer for another 5 minutes\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"minty-cookies\",\n    name: \"Minty Cookies\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1 cup butter flavored Crisco\",\n          \"1 package (8 oz) cream cheese, softened\",\n          \"3/4 cup granulated sugar\",\n          \"1/2 cup firmly packed brown sugar\",\n          \"1 tsp vanilla\",\n          \"2 cups all-purpose flour\",\n          \"1 3/4 cups mint chocolate chips\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Heat oven to 375F\",\n          \"Combine Crisco, cream cheese, sugars and vanilla in large bowl\",\n          \"Beat at medium speed of electric mixer until well blended\",\n          \"Mix flour into creamed mixture at low speed until just blended\",\n          \"Stir in mint chocolate chips\",\n          \"Form balls of 3-4cm diameter, and press slightly onto baking sheet\",\n          \"Bake for 11 minutes, or until lightly browned\",\n          \"Cool for 2 minutes on baking sheet, then move to cooling rack\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"shrimp-squash-risotto\",\n    name: \"Shrimp Squash Risotto\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"2 packs of PC 4 cheese risotto (2x170g)\",\n          \"1 butternut squash (~1 pound, cubed)\",\n          \"25 shrimp\",\n          \"garlic (or garlic powder)\",\n          \"salt\",\n          \"pepper\",\n          \"butter\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Cut butternut squash into bite-size cubes (1-2cm), toss in oil, and roast for ~40 minutes at 375F\",\n          \"Make risotto according to package instructions (basically like KD)\",\n          \"Toss shrimp in oil, salt, pepper, and minced garlic (or garlic powder)\",\n          \"Fry shrimp until fully cooked\",\n          \"Mix everything together, and add pepper to taste\",\n        ],\n      },\n    ],\n  },\n  {\n    key: \"soy-sriracha-sauce\",\n    name: \"Soy Sriracha Sauce\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"1 tsp sesame oil\",\n          \"3 tbsp soy sauce\",\n          \"1 tbsp grainy mustard\",\n          \"1+ tsp sriracha sauce\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\"mix together\"],\n      },\n    ],\n  },\n  {\n    key: \"vidalia-onion-dip\",\n    name: \"Vidalia Onion Dip\",\n    sections: [\n      {\n        type: \"ingredients\",\n        items: [\n          \"8 oz cream cheese\",\n          \"1/2 cup mayonaise\",\n          \"1 cup vidalia onion, finely chopped\",\n          \"1/4 cup parmesan cheese\",\n          \"1+ tsp Frank's Red Hot\",\n          \"salt\",\n          \"pepper\",\n          \"paprika\",\n        ],\n      },\n      {\n        type: \"directions\",\n        items: [\n          \"Mix together, and spread in a shallow baking dish.\",\n          \"Sprinkle with paprika.\",\n          \"Bake for 40 minutes at 350F.\",\n        ],\n      },\n    ],\n  },\n];\n\nexport {recipes};\n","import React from \"react\";\nimport {\n  Drawer as MuiDrawer,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nimport {recipes} from \"../recipes\";\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 240,\n  },\n}));\n\nconst Drawer = props => {\n  const {isDrawerOpen, setDrawerOpen} = props;\n  const classes = useStyles();\n\n  const closeDrawer = () => setDrawerOpen(false);\n\n  return (\n    <MuiDrawer open={isDrawerOpen} onClose={closeDrawer}>\n      <div\n        tabIndex={0}\n        role=\"button\"\n        onClick={closeDrawer}\n        onKeyDown={closeDrawer}\n      >\n        <List className={classes.list}>\n          {recipes.map(recipe => (\n            <ListItem\n              key={recipe.key}\n              button\n              component=\"a\"\n              href={`#${recipe.key}`}\n            >\n              <ListItemText primary={recipe.name} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </MuiDrawer>\n  );\n};\n\nexport default Drawer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Typography} from \"@material-ui/core\";\n\nconst Section = ({type, title, items}) => {\n  const List = type === \"ingredients\" ? \"ul\" : \"ol\";\n  const defaultTitle = type === \"ingredients\" ? \"Ingredients\" : \"Directions\";\n\n  return (\n    <div>\n      <Typography variant=\"h6\">{title || defaultTitle}</Typography>\n      <List>\n        {items.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nSection.propTypes = {\n  type: PropTypes.oneOf([\"ingredients\", \"directions\"]).isRequired,\n  title: PropTypes.string,\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nimport Section from \"./Section\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(2),\n  },\n}));\n\nconst Recipe = ({name, sections}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h5\">{name}</Typography>\n      {sections.map((section, index) => (\n        <Section key={index} {...section} />\n      ))}\n    </div>\n  );\n};\n\nRecipe.propTypes = {\n  name: PropTypes.string.isRequired,\n  sections: PropTypes.arrayOf(Section).isRequired,\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport Recipe from \"../Recipe\";\nimport {recipes} from \"../../recipes\";\n\nconst Router = () => (\n  <HashRouter hashType=\"noslash\">\n    <Switch>\n      {recipes.map(recipe => (\n        <Route\n          key={recipe.key}\n          path={`/${recipe.key}`}\n          render={() => (\n            <Recipe name={recipe.name} sections={recipe.sections} />\n          )}\n        />\n      ))}\n\n      <Route exact path=\"/\">\n        Pick a recipe from the menu!\n      </Route>\n      <Route>Recipe not found!</Route>\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React, {useState} from \"react\";\nimport {withTheme} from \"./theme\";\nimport AppBar from \"./components/AppBar\";\nimport Drawer from \"./components/Drawer\";\nimport Router from \"./components/Router\";\n\nconst App = () => {\n  const [isDrawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <div>\n      <AppBar isDrawerOpen={isDrawerOpen} setDrawerOpen={setDrawerOpen} />\n      <Drawer isDrawerOpen={isDrawerOpen} setDrawerOpen={setDrawerOpen} />\n      <Router />\n    </div>\n  );\n};\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}